version: '3.8'

services:
  # MongoDB 서비스
  mongodb:
    image: mongo:latest
    container_name: inventory-mongodb-prod
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    restart: unless-stopped

  # 백엔드 서비스
  backend:
    image: j99hg99/my-inv-backend:latest
    container_name: inventory-backend-prod
    ports:
      - "5001:5001"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=5001
      - MONGODB_URI=mongodb://inventory-mongodb-prod:27017/myapp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker 소켓 마운트 (크론잡용)
      - cleanup_logs:/var/log  # 로그 볼륨
    depends_on:
      - mongodb
    networks:
      - app-network
    restart: unless-stopped

  # 프론트엔드 서비스
  frontend:
    image: j99hg99/my-inv-frontend:latest
    container_name: inventory-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Nginx 서비스
  nginx:
    image: nginx:alpine
    container_name: inventory-nginx-prod
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Docker 정리 크론잡 서비스
  docker-cleanup:
    build:
      context: ./docker-cleanup
      dockerfile: Dockerfile
    container_name: inventory-cleanup-cron
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker 소켓 마운트
      - cleanup_logs:/var/log
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - backend
      - frontend

volumes:
  mongodb_data:
  cleanup_logs:

networks:
  app-network:
    driver: bridge